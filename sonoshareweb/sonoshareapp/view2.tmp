from django.http import JsonResponse
from django.shortcuts import render
from .models import Song
from ytmusicapi import YTMusic
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import json

def test_create_song(request):
    # Set up Spotify API with authentication using the Client Credentials Flow
    client_id = '31e4302c101d4027ab0da2c6be1763ca'
    client_secret = 'f78a7bde118241c0ae48493ff5bfe4ab'
    client_credentials_manager = SpotifyClientCredentials(client_id=client_id, client_secret=client_secret)
    sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

    # # Set up YouTube Music API
    # with open('oauth.json') as f:
    #     oauth_credentials = json.load(f)

    ytmusic = YTMusic()

    # Retrieve the YouTube Music playlist
    playlist_id = 'PLsFg4PRlDr7mPU0qMZvZWev_qh7nx-I2O'
    try:
        playlist_response = ytmusic.get_playlist(playlist_id)
        print("YouTube Music Playlist Response:")
        print(playlist_response)

        playlist = playlist_response
        print("YouTube Music Playlist:")
        print(json.dumps(playlist, indent=2))
    except Exception as e:
        return JsonResponse({'error': f"Error retrieving YouTube Music playlist: {str(e)}"}, status=500)

    # Extract track and artist information from the playlist
    tracks = []
    for item in playlist['tracks']:
        track_name = item['title']
        artist_name = item['artists'][0]['name']
        tracks.append((track_name, artist_name))

    # Create a new playlist on Spotify
    playlist_name = 'My YouTube Music Playlist'
    playlist_description = 'Converted from YouTube Music'
    spotify_user_id = '31jajbqnqzda6s3igkllqf52yqwy'
    try:
        spotify_playlist_response = sp.user_playlist_create(user=spotify_user_id, name=playlist_name, public=True, description=playlist_description)
        print("Spotify Playlist Creation Response:")
        print(spotify_playlist_response)

        spotify_playlist = spotify_playlist_response
    except Exception as e:
        return JsonResponse({'error': f"Error creating Spotify playlist: {str(e)}"}, status=500)

    # Search for each track on Spotify and add it to the playlist
    for track_name, artist_name in tracks:
        query = f'track:{track_name} artist:{artist_name}'
        try:
            search_response = sp.search(q=query, type='track', limit=1)
            print("Spotify Search Response:")
            print(search_response)

            results = search_response
            print("Spotify Search Results:")
            print(json.dumps(results, indent=2))

            if results['tracks']['items']:
                track_id = results['tracks']['items'][0]['id']
                sp.user_playlist_add_tracks(user=spotify_user_id, playlist_id=spotify_playlist['id'], tracks=[track_id])
                print(f"Added track: {track_name} by {artist_name}")
            else:
                print(f"Track not found on Spotify: {track_name} by {artist_name}")
        except Exception as e:
            print(f"Error searching for track on Spotify: {track_name} by {artist_name}. Error: {str(e)}")

    print("Playlist creation completed.")

    # Add the song to the playlist
    try:
        sp.user_playlist_add_tracks(user=spotify_user_id, playlist_id=spotify_playlist['id'], tracks=[track_id])
        playlist_url = spotify_playlist['external_urls']['spotify']
    except Exception as e:
        return JsonResponse({'error': f"Error adding song to Spotify playlist: {str(e)}"}, status=500)

    return render(request, 'sonoshareapp/test_create_song.html', {'song': None, 'playlist_url': playlist_url})

