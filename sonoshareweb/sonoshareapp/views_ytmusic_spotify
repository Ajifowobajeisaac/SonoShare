from django.http import JsonResponse
from django.shortcuts import render, redirect
from .models import Song
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import spotipy.util as util
import re
import json
import requests

def index(request):
    return render(request, 'sonoshareapp/index.html')


# Utility functions
def extract_playlist_id(playlist_url, platform):
    if platform == 'spotify':
        pattern = re.compile(r'playlist/([a-zA-Z0-9_-]+)')
    elif platform == 'ytmusic':
        pattern = re.compile(r'list=([a-zA-Z0-9_-]+)')
    else:
        return None

    match = pattern.search(playlist_url)
    if match:
        return match.group(1)
    else:
        return None


def get_user_credentials(request, platform):
    if platform == 'spotify':
        client_id = '31e4302c101d4027ab0da2c6be1763ca'
        client_secret = 'f78a7bde118241c0ae48493ff5bfe4ab'
        redirect_uri = 'http://localhost:3333/callback/'
        scope = 'playlist-read-private playlist-modify-public playlist-modify-private'
        return util.prompt_for_user_token(request.session.session_key, scope, client_id, client_secret, redirect_uri)
    elif platform == 'ytmusic':
        if 'ytmusic_credentials' not in request.session:
            return None
        return request.session['ytmusic_credentials']


def search_tracks(tracks, platform, credentials):
    if platform == 'spotify':
        sp = spotipy.Spotify(auth=credentials)
        spotify_tracks = []
        for track_name, artist_name in tracks:
            query = f'track:{track_name} artist:{artist_name}'
            try:
                search_response = sp.search(q=query, type='track', limit=1)
                results = search_response
                if results['tracks']['items']:
                    track_id = results['tracks']['items'][0]['id']
                    track_info = {
                        'name': track_name,
                        'artist': artist_name,
                        'spotify_id': track_id
                    }
                    spotify_tracks.append(track_info)
            except Exception as e:
                print(f"Error searching for track on Spotify: {track_name} by {artist_name}. Error: {str(e)}")
        return spotify_tracks
    elif platform == 'ytmusic':
        ytmusic = YTMusic()
        ytmusic_tracks = []
        for track_name, artist_name in tracks:
            query = f'{track_name} {artist_name}'
            try:
                search_response = ytmusic.search(query, filter='songs')
                if search_response:
                    track_id = search_response[0]['videoId']
                    track_info = {
                        'name': track_name,
                        'artist': artist_name,
                        'ytmusic_id': track_id
                    }
                    ytmusic_tracks.append(track_info)
            except Exception as e:
                print(f"Error searching for track on YouTube Music: {track_name} by {artist_name}. Error: {str(e)}")
        return ytmusic_tracks


def extract_tracks(playlist):
    tracks = []
    if 'tracks' in playlist and isinstance(playlist['tracks'], list):
        for item in playlist['tracks']:
            if 'title' in item and 'artists' in item and item['artists']:
                track_name = item['title']
                artist_name = item['artists'][0]['name']
                tracks.append((track_name, artist_name))
    return tracks

def create_playlist(request):
    if request.method == 'POST':
        playlist_name = request.POST.get('playlist_name')
        playlist_description = request.POST.get('playlist_description')
        tracks = json.loads(request.POST.get('tracks'))
        platform = request.POST.get('platform')

        if platform == 'spotify':
            return create_spotify_playlist(request, playlist_name, playlist_description, tracks)
        elif platform == 'ytmusic':
            return create_ytmusic_playlist(request, playlist_name, playlist_description, tracks)
        else:
            return JsonResponse({'error': 'Invalid platform'}, status=400)
    else:
        return redirect('index')


# Platform-specific functions
def convert_spotify_playlist(request):
    playlist_url = request.POST.get('playlist_url')
    credentials = get_user_credentials(request, 'spotify')
    platform = 'spotify'

    if credentials:
        sp = spotipy.Spotify(auth=credentials)
        playlist_id = extract_playlist_id(playlist_url, 'spotify')

        try:
            playlist = sp.playlist(playlist_id)
        except Exception as e:
            return JsonResponse({'error': f"Error retrieving Spotify playlist: {str(e)}"}, status=500)

        tracks = extract_tracks(playlist)
        ytmusic_credentials = get_user_credentials(request, 'ytmusic')

        ytmusic_tracks = search_tracks(tracks, 'ytmusic', ytmusic_credentials)

        return render(request, 'sonoshareapp/review_playlist.html', {
            'playlist_name': playlist['name'],
            'playlist_description': playlist['description'],
            'tracks': zip(tracks, ytmusic_tracks),
            'ytmusic_tracks': json.dumps(ytmusic_tracks),
            'platform': platform
        })
    else:
        return redirect('index')


def convert_ytmusic_playlist(request):
    playlist_url = request.POST.get('playlist_url')
    ytmusic = YTMusic()
    playlist_id = extract_playlist_id(playlist_url, 'ytmusic')
    platform = 'ytmusic'

    try:
        playlist = ytmusic.get_playlist(playlist_id)
    except Exception as e:
        return JsonResponse({'error': f"Error retrieving YouTube Music playlist: {str(e)}"}, status=500)

    tracks = extract_tracks(playlist)
    credentials = get_user_credentials(request, 'spotify')

    if credentials:
        spotify_tracks = search_tracks(tracks, 'spotify', credentials)

        return render(request, 'sonoshareapp/review_playlist.html', {
            'playlist_name': playlist['title'],
            'playlist_description': playlist['description'],
            'tracks': zip(tracks, spotify_tracks),
            'spotify_tracks': json.dumps(spotify_tracks),
            'platform': platform 
        })
    else:
        return redirect('spotify_auth')


def create_spotify_playlist(request):
    playlist_name = request.POST.get('playlist_name')
    playlist_description = request.POST.get('playlist_description')
    spotify_tracks = json.loads(request.POST.get('spotify_tracks'))
    credentials = get_user_credentials(request, 'spotify')

    if credentials:
        sp = spotipy.Spotify(auth=credentials)

        try:
            spotify_playlist = sp.user_playlist_create(user=sp.me()['id'], name=playlist_name, public=True, description=playlist_description)
        except Exception as e:
            return JsonResponse({'error': f"Error creating Spotify playlist: {str(e)}"}, status=500)

        track_ids = [track['spotify_id'] for track in spotify_tracks if track['spotify_id']]
        try:
            sp.user_playlist_add_tracks(user=sp.me()['id'], playlist_id=spotify_playlist['id'], tracks=track_ids)
        except Exception as e:
            return JsonResponse({'error': f"Error adding tracks to Spotify playlist: {str(e)}"}, status=500)

        playlist_url = spotify_playlist['external_urls']['spotify']
        return render(request, 'sonoshareapp/create_user_playlist.html', {'playlist_url': playlist_url})
    else:
        return redirect('spotify_auth')


def create_ytmusic_playlist(request):
    playlist_name = request.POST.get('playlist_name')
    playlist_description = request.POST.get('playlist_description')
    ytmusic_tracks = json.loads(request.POST.get('ytmusic_tracks'))

    if credentials:
        ytmusic = YTMusic()

        try:
            ytmusic_playlist = ytmusic.create_playlist(title=playlist_name, description=playlist_description)
        except Exception as e:
            return JsonResponse({'error': f"Error creating YouTube Music playlist: {str(e)}"}, status=500)

        track_ids = [track['ytmusic_id'] for track in ytmusic_tracks if track['ytmusic_id']]
        try:
            ytmusic.add_playlist_items(ytmusic_playlist['id'], track_ids)
        except Exception as e:
            return JsonResponse({'error': f"Error adding tracks to YouTube Music playlist: {str(e)}"}, status=500)

        playlist_url = f"https://music.youtube.com/playlist?list={ytmusic_playlist['id']}"
        return render(request, 'sonoshareapp/create_user_playlist.html', {'playlist_url': playlist_url})
    else:
        return redirect('ytmusic_auth')


def spotify_auth(request):
    client_id = '31e4302c101d4027ab0da2c6be1763ca'
    client_secret = 'f78a7bde118241c0ae48493ff5bfe4ab'
    redirect_uri = 'http://localhost:3333/callback/'
    scope = 'playlist-read-private playlist-modify-public playlist-modify-private'

    auth_url = f'https://accounts.spotify.com/authorize?response_type=code&client_id={client_id}&scope={scope}&redirect_uri={redirect_uri}'
    return redirect(auth_url)


def spotify_callback(request):
    client_id = '31e4302c101d4027ab0da2c6be1763ca'
    client_secret = 'f78a7bde118241c0ae48493ff5bfe4ab'
    redirect_uri = 'http://localhost:3333/callback/'
    auth_code = request.GET.get('code')

    token = util.prompt_for_user_token(request.session.session_key, scope=None, client_id=client_id, client_secret=client_secret, redirect_uri=redirect_uri, code=auth_code)

    return redirect('convert_playlist')




def convert_playlist(request):
    if request.method == 'POST':
        playlist_url = request.POST.get('playlist_url')
        if 'spotify.com' in playlist_url:
            return convert_spotify_playlist(request)
        elif 'youtube.com' in playlist_url or 'youtu.be' in playlist_url:
            return convert_ytmusic_playlist(request)
        else:
            return render(request, 'sonoshareapp/index.html', {'error': 'Invalid playlist URL'})
    else:
        return redirect('index')
